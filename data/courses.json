[
    {
        "type": "PhD Course",
        "title": "Introduction to formal verification: an appetiser",
        "teacher": "Angelo Ferrando",
        "abstract": "The course provides a general introduction to static formal verification (such as Model Checking), and runtime verification. The course will not focus only on the theoretical foundations of the two approaches, but it will offer practical insights as well. For both methodologies, established tools will be presented and experimented (through laboratories). At the end of the course, a more general overview of recent works on runtime verification will also be reported. This will help the students to have a better understanding of the newest features and challenging applications where such formal technique has been applied.",
        "image": "./images/courses/phdAngelo.jpg"
    }, 
    {
        "type": "PhD Course",
        "title": "Introduction to Type Theory from foundations to practice",
        "teacher": "Francesco Dagnino and Jacopo Emmenegger",
        "abstract": "Proof assistants are tools designed to write formal proofs and automatically check their correctness. They are increasingly used  in many different domains, from software verification to formalized mathematics. Most popular proof assistants, such as Agda, Coq or Lean, implement a constructive logic based on a (dependent) type theory. This means that they are strongly typed functional programming languages where types and programs are seen as logical formulas and proofs, respectively, and then correctness of proofs is just ensured by type-checking a program. In the course, we will  study fundamental notions and results on type theories, explaining their connection with logic, and we will experiment formal reasoning in a type theory, using Agda as a concrete system. ",
        "target": "MSc and PhD students", 
        "requirements": "basics of propositional and first order logic", 
        "image": "./images/courses/default.jpg"
    }
]
